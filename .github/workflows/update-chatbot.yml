# .github/workflows/update-chatbot.yml
name: Update Chatbot Responses

on:
  schedule:
    # Run weekly on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch: # Allow manual trigger
  push:
    paths:
      - 'chatbot-config.json' # Trigger when config changes

jobs:
  update-responses:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Generate AI Responses
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          node << 'EOF'
          const fs = require('fs');
          
          // Common questions to pre-generate responses for
          const commonQuestions = [
            "What is machine learning?",
            "How do I start a career in data science?",
            "What are the latest trends in AI?",
            "What programming languages should I learn for ML?",
            "How do I deploy machine learning models?",
            "What is the difference between AI and ML?",
            "What are neural networks?",
            "How do I learn deep learning?",
            "What is MLOps?",
            "What cloud platforms are best for ML?"
          ];
          
          async function generateResponses() {
            const responses = {};
            
            for (const question of commonQuestions) {
              try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                      {
                        role: 'system',
                        content: `You are Kezhen Yang's AI assistant. Kezhen is a Solution Advisor at SAP Signavio with expertise in data analytics and ML/AI technologies, focused on advancing to Machine Learning Engineering roles. 

Key facts about Kezhen:
- Current role: Solution Advisor - Data Specialist at SAP America (since Jan 2022)
- Education: M.S. Business Analytics & B.A. Economics from UT Austin
- Location: Austin, Texas
- Technical skills: Python, SQL, R, ML/AI (LLM, GenAI, GPT, Claude), Cloud platforms (AWS, GCP, Azure)

When answering general questions, provide helpful information while occasionally mentioning how it relates to Kezhen's experience or background. Keep responses concise (under 250 words) and professional.`
                      },
                      {
                        role: 'user',
                        content: question
                      }
                    ],
                    max_tokens: 300,
                    temperature: 0.7,
                  }),
                });
                
                if (response.ok) {
                  const data = await response.json();
                  responses[question.toLowerCase()] = data.choices[0].message.content;
                  console.log(`Generated response for: ${question}`);
                } else {
                  console.error(`Failed to generate response for: ${question}`);
                }
                
                // Rate limiting - wait 1 second between requests
                await new Promise(resolve => setTimeout(resolve, 1000));
                
              } catch (error) {
                console.error(`Error generating response for "${question}":`, error.message);
              }
            }
            
            // Save responses to file
            const output = {
              generated_at: new Date().toISOString(),
              responses: responses
            };
            
            fs.writeFileSync('ai-responses.json', JSON.stringify(output, null, 2));
            console.log(`Generated ${Object.keys(responses).length} AI responses`);
          }
          
          generateResponses().catch(console.error);
          EOF
          
      - name: Commit updated responses
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ai-responses.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update AI responses $(date +'%Y-%m-%d')"
            git push
          fi
